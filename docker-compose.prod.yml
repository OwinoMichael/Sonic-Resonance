services:
  db:
    image: postgres:16-alpine
    container_name: pg-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-sonicres}
      POSTGRES_PASSWORD: ${DB_PASS:-sonicres123}
      POSTGRES_DB: ${DB_NAME:-sonic_resonance}
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sonicres}"]
      interval: 5s
      timeout: 5s
      retries: 10

  spring:
    build:
      context: ./backend-spring
      dockerfile: Dockerfile
    container_name: springboot-app-prod
    restart: unless-stopped
    depends_on:
      - db
    ports:
      - "8080:8080"
    env_file:
      - .env
    networks:
      - app-network

  react:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
    container_name: react-app-prod
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - app-network

volumes:
  pgdata_prod:

networks:
  app-network:
    driver: bridge